# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
View(df1)
View(df1)
# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
View(df1)
View(df1)
summary(df1$noParkSpaces)
str(df1$noParkSpaces)
summary(df1$noParkSpaces)
summary(df1$typeOfFlat)
levels(df1$typeOfFlat)
distinct(df1$typeOfFlat)
summary(df1$typeOfFlat)
set(df1$typeOfFlat)
str(df1$typeOfFlat)
str(df1$typeOfFlat)
unique(df1$typeOfFlat)
unique(df1$regio2)
unique(df1$condition)
unique(df1$lastRefurbish)
unique(df1$energyEfficiencyClass)
unique(df1$noParkSpaces)
unique(df1$floor)
summary(df1$typeOfFlat)
# continuous variables
summary(df1$totalRent)
summary(df1$livingSpace)
summary(df1$yearConstructed_transf)
unique(df1$newlyConst)
unique(df1$balcony)
unique(df1$yearConstructed)
unique(df1$noParkSpaces)
sum(is.na(noParkSpaces))
sum(is.na(df1$noParkSpaces))
unique(df1$hasKitchen)
sum(is.na(df1$livingSpace))
sum(is.na(df1$newlyConst))
sum(is.na(df1))
sum(is.na(df1$))
unique(df1$hasKitchen)
sum(is.na(df1$ID))
sum(is.na(df1$))
sum(is.na(df1$livingSpace))
sum(is.na(df1$lift))
sum(is.na(df1$typeOfFlat))
sum(is.na(df1$floor))
sum(is.na(df1$garden))
sum(is.na(df1$regio2))
sum(is.na(df1$condition))
condition
sum(is.na(df1$lastRefurbished))
unique(df1$lastRefurbished)
unique(df1$lastRefurbished)
unique(df1$lastRefurbish)
sum(is.na(df1$lastRefurbish))
sum(df1$lastRefurbish=="NO_INFORMATION")
unique(df1$livingSpace)
unique(df1$lift)
unique(df1$typeOfFlat)
unique(df1$floor)
unique(df1$garden)
unique(df1$regio2)
unique(df1$condition)
sum(df1$condition=="NO_INFORMATION")
sum(df1$energyEfficiencyClass=="NO_INFORMATION")
library(dplyr)
library(tidyr)
library(ggplot2)
library(zoo)
library(epiDisplay)
# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
sum(df1$energyEfficiencyClass=="NO_INFORMATION")
sum(is.na(df1$yearConstructed))
unique(df1$condition)
# ------------------------------------------------------------------------------
# TASK 1
# ------------------------------------------------------------------------------
# create a new variable named 'parking_transf'
# by grouping the variable 'noParkSpaces'
df1 = df1 %>%mutate(
parking_transf = case_when(
is.na(noParkSpaces)  ~ "0 or no information",
noParkSpaces == 0 ~ "0 or no information",
TRUE                      ~  "1+"
)
)
# create a new variable named 'type_flat_transf'
# by grouping the variable 'typeOfFlat'
# missing values are grouped separately into the class 'no information'
df1 = df1%>%mutate(
type_flat_transf = case_when(
typeOfFlat %in% ("apartment")  ~ "apartment",
typeOfFlat %in% c('loft',
'maisonette',
'penthouse',
'terraced_flat',
'other') ~ "luxurious_artistic_other",
typeOfFlat %in% c('ground_floor',
'raised_ground_floor') ~ "r_ground_floor",
typeOfFlat %in% c('roof_storey',
'half_basement') ~ "roof_halfBasement",
TRUE                      ~  "no information"
)
)
# create a new variable named 'yearConstructed_transf'
# by subtracting each year from 2020
df1$yearConstructed_transf<-(2020-df1$yearConstructed)
# create a new variable named 'CityType'
# by grouping the variable 'regio2'
df1 = df1 %>%mutate(
CityType = case_when(
regio2 %in% c('Köln',
'Düsseldorf',
'Dortmund',
'Essen',
'Duisburg') ~ "1-5",
regio2 %in% c('Bochum',
'Wuppertal',
'Bielefeld',
'Bonn',
'Münster') ~ "6-10",
TRUE                      ~  "elsewhere"
)
)
# drop the variable 'ID' and the above (four) modified variables
drop<-c( "ID", "noParkSpaces", "typeOfFlat", "yearConstructed", "regio2")
df1 = df1[,!names(df1)%in%drop]
# evaluate the structure of the data-frame
str(df1)
# convert the following variables into type 'factor'
df1$newlyConst <- as.factor(df1$newlyConst)
df1$balcony <- as.factor(df1$balcony)
df1$parking_transf <- as.factor(df1$parking_transf)
df1$hasKitchen <- as.factor(df1$hasKitchen)
df1$lift <- as.factor(df1$lift)
df1$type_flat_transf <- as.factor(df1$type_flat_transf)
df1$garden <- as.factor(df1$garden)
df1$CityType <- as.factor(df1$CityType)
df1$condition <- as.factor(df1$condition)
df1$lastRefurbish <- as.factor(df1$lastRefurbish)
df1$energyEfficiencyClass <- as.factor(df1$energyEfficiencyClass)
# ------------------------------------------------------------------------------
# UNIVARIATE ANALYSIS
# ------------------------------------------------------------------------------
#discrete variables with 2 levels
summary(df1$newlyConst)
summary(df1$balcony)
summary(df1$hasKitchen)
summary(df1$lift)
summary(df1$garden)
summary(df1$parking_transf)
# discrete variables with more than 2 levels
tab1(df1$floor, xlab="Floor")
tab1(df1$condition,
names.arg=c("Average","Good", "No information"))
tab1(df1$lastRefurbish,
names.arg=c("Last 5 years","No information", "Over 5 years"))
tab1(df1$energyEfficiencyClass,
names.arg=c("A+/A/B/C", "D/E/F/G/H", "No information"))
tab1(df1$type_flat_transf,
names.arg=c("Apartment","Luxurious/Artistic/Other",
"No information", "Raised ground floor/ Ground floor",
"Roof storey/ Half basement"))
tab1(df1$CityType,
names.arg=c("1-5", "6-10","Elsewhere"))
# continuous variables
summary(df1$totalRent)
boxplot(df1$totalRent, xlab="Total rent")
summary(df1$livingSpace)
boxplot(df1$livingSpace, xlab="Property size (square meters)")
summary(df1$yearConstructed_transf)
boxplot(df1$yearConstructed_transf, xlab="2020 - Year constructed")
# ------------------------------------------------------------------------------
# TASK 2
# ------------------------------------------------------------------------------
# create a new data-frame 'df2' from 'df1' for this task only
# remove rows where the total rent is missing
df2<-subset(df1,  !totalRent=="NA")
# create a new variable named 'sqmPrice'
# this contains rental price per square meter for each row
df2$sqmPrice<-(df2$totalRent/df2$livingSpace)
# drop the variable 'totalRent'
drop<-c("totalRent")
df2 = df2[,!names(df2)%in%drop]
# Analysis of the Price per square meter
summary(df2$sqmPrice)
boxplot(df2$sqmPrice, xlab="Price per square meter")
install.packages("texreg")
library(texreg)
table.string <- texreg(linearmodel, return.string = TRUE)
cat(table.string)
library(dplyr)
library(tidyr)
library(ggplot2)
library(zoo)
library(epiDisplay)
# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
sum(df1$energyEfficiencyClass=="NO_INFORMATION")
sum(is.na(df1$yearConstructed))
unique(df1$noParkSpaces)
# ------------------------------------------------------------------------------
# TASK 1
# ------------------------------------------------------------------------------
# create a new variable named 'parking_transf'
# by grouping the variable 'noParkSpaces'
df1 = df1 %>%mutate(
parking_transf = case_when(
is.na(noParkSpaces)  ~ "0 or no information",
noParkSpaces == 0 ~ "0 or no information",
TRUE                      ~  "1+"
)
)
# create a new variable named 'type_flat_transf'
# by grouping the variable 'typeOfFlat'
# missing values are grouped separately into the class 'no information'
df1 = df1%>%mutate(
type_flat_transf = case_when(
typeOfFlat %in% ("apartment")  ~ "apartment",
typeOfFlat %in% c('loft',
'maisonette',
'penthouse',
'terraced_flat',
'other') ~ "luxurious_artistic_other",
typeOfFlat %in% c('ground_floor',
'raised_ground_floor') ~ "r_ground_floor",
typeOfFlat %in% c('roof_storey',
'half_basement') ~ "roof_halfBasement",
TRUE                      ~  "no information"
)
)
# create a new variable named 'yearConstructed_transf'
# by subtracting each year from 2020
df1$yearConstructed_transf<-(2020-df1$yearConstructed)
# create a new variable named 'CityType'
# by grouping the variable 'regio2'
df1 = df1 %>%mutate(
CityType = case_when(
regio2 %in% c('Köln',
'Düsseldorf',
'Dortmund',
'Essen',
'Duisburg') ~ "1-5",
regio2 %in% c('Bochum',
'Wuppertal',
'Bielefeld',
'Bonn',
'Münster') ~ "6-10",
TRUE                      ~  "elsewhere"
)
)
# drop the variable 'ID' and the above (four) modified variables
drop<-c( "ID", "noParkSpaces", "typeOfFlat", "yearConstructed", "regio2")
df1 = df1[,!names(df1)%in%drop]
# evaluate the structure of the data-frame
str(df1)
# convert the following variables into type 'factor'
df1$newlyConst <- as.factor(df1$newlyConst)
df1$balcony <- as.factor(df1$balcony)
df1$parking_transf <- as.factor(df1$parking_transf)
df1$hasKitchen <- as.factor(df1$hasKitchen)
df1$lift <- as.factor(df1$lift)
df1$type_flat_transf <- as.factor(df1$type_flat_transf)
df1$garden <- as.factor(df1$garden)
df1$CityType <- as.factor(df1$CityType)
df1$condition <- as.factor(df1$condition)
df1$lastRefurbish <- as.factor(df1$lastRefurbish)
df1$energyEfficiencyClass <- as.factor(df1$energyEfficiencyClass)
#discrete variables with 2 levels
summary(df1$newlyConst)
summary(df1$balcony)
summary(df1$hasKitchen)
summary(df1$lift)
summary(df1$garden)
summary(df1$parking_transf)
library(dplyr)
library(tidyr)
library(ggplot2)
library(zoo)
library(epiDisplay)
# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
sum(df1$energyEfficiencyClass=="NO_INFORMATION")
sum(is.na(df1$yearConstructed))
unique(df1$noParkSpaces)
# ------------------------------------------------------------------------------
# TASK 1
# ------------------------------------------------------------------------------
# create a new variable named 'parking_transf'
# by grouping the variable 'noParkSpaces'
df1 = df1 %>%mutate(
parking_transf = case_when(
is.na(noParkSpaces)  ~ "0 or no information",
noParkSpaces == 0 ~ "0 or no information",
TRUE                      ~  "1+"
)
)
# create a new variable named 'type_flat_transf'
# by grouping the variable 'typeOfFlat'
# missing values are grouped separately into the class 'no information'
df1 = df1%>%mutate(
type_flat_transf = case_when(
typeOfFlat %in% ("apartment")  ~ "apartment",
typeOfFlat %in% c('loft',
'maisonette',
'penthouse',
'terraced_flat',
'other') ~ "luxurious_artistic_other",
typeOfFlat %in% c('ground_floor',
'raised_ground_floor') ~ "r_ground_floor",
typeOfFlat %in% c('roof_storey',
'half_basement') ~ "roof_halfBasement",
TRUE                      ~  "no information"
)
)
# create a new variable named 'yearConstructed_transf'
# by subtracting each year from 2020
df1$yearConstructed_transf<-(2020-df1$yearConstructed)
# create a new variable named 'CityType'
# by grouping the variable 'regio2'
df1 = df1 %>%mutate(
CityType = case_when(
regio2 %in% c('Köln',
'Düsseldorf',
'Dortmund',
'Essen',
'Duisburg') ~ "1-5",
regio2 %in% c('Bochum',
'Wuppertal',
'Bielefeld',
'Bonn',
'Münster') ~ "6-10",
TRUE                      ~  "elsewhere"
)
)
# drop the variable 'ID' and the above (four) modified variables
drop<-c( "ID", "noParkSpaces", "typeOfFlat", "yearConstructed", "regio2")
df1 = df1[,!names(df1)%in%drop]
# evaluate the structure of the data-frame
str(df1)
# convert the following variables into type 'factor'
df1$newlyConst <- as.factor(df1$newlyConst)
df1$balcony <- as.factor(df1$balcony)
df1$parking_transf <- as.factor(df1$parking_transf)
df1$hasKitchen <- as.factor(df1$hasKitchen)
df1$lift <- as.factor(df1$lift)
df1$type_flat_transf <- as.factor(df1$type_flat_transf)
df1$garden <- as.factor(df1$garden)
df1$CityType <- as.factor(df1$CityType)
df1$condition <- as.factor(df1$condition)
df1$lastRefurbish <- as.factor(df1$lastRefurbish)
df1$energyEfficiencyClass <- as.factor(df1$energyEfficiencyClass)
# create a new data-frame 'df3' from 'df1' for this task only
# remove the variables 'yearConstructed_transf' and 'lastRefurbish'
drop<-c("yearConstructed_transf", "lastRefurbish")
df3 = df1[,!names(df1)%in%drop]
# check the number of missing values in the continuous variables
sum(is.na(df3$totalRent))
sum(is.na(df3$livingSpace))
# only 'totalRent' has missing values
# replace these with the mean of the remaining rows
df3$totalRent <- na.aggregate(df3$totalRent)
# summary of the variable 'newlyConst'
# Only around 7% of the houses are newly constructed
summary(df3$newlyConst)
# Estimate logistic model for 'newlyConst' using the remaining variables
logisticmodel = glm(newlyConst ~ ., data=df3, family = "binomial")
summary(logisticmodel)
# apply backward stepwise variable selection using the AIC
logisticmodel = step(logisticmodel, direction = "backward")
summary(logisticmodel)
library(dplyr)
library(tidyr)
library(ggplot2)
library(zoo)
library(epiDisplay)
# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
sum(df1$energyEfficiencyClass=="NO_INFORMATION")
sum(is.na(df1$yearConstructed))
unique(df1$noParkSpaces)
# ------------------------------------------------------------------------------
# TASK 1
# ------------------------------------------------------------------------------
# create a new variable named 'parking_transf'
# by grouping the variable 'noParkSpaces'
df1 = df1 %>%mutate(
parking_transf = case_when(
is.na(noParkSpaces)  ~ "0 or no information",
noParkSpaces == 0 ~ "0 or no information",
TRUE                      ~  "1+"
)
)
# create a new variable named 'type_flat_transf'
# by grouping the variable 'typeOfFlat'
# missing values are grouped separately into the class 'no information'
df1 = df1%>%mutate(
type_flat_transf = case_when(
typeOfFlat %in% ("apartment")  ~ "apartment",
typeOfFlat %in% c('loft',
'maisonette',
'penthouse',
'terraced_flat',
'other') ~ "luxurious_artistic_other",
typeOfFlat %in% c('ground_floor',
'raised_ground_floor') ~ "r_ground_floor",
typeOfFlat %in% c('roof_storey',
'half_basement') ~ "roof_halfBasement",
TRUE                      ~  "no information"
)
)
# create a new variable named 'yearConstructed_transf'
# by subtracting each year from 2020
df1$yearConstructed_transf<-(2020-df1$yearConstructed)
# create a new variable named 'CityType'
# by grouping the variable 'regio2'
df1 = df1 %>%mutate(
CityType = case_when(
regio2 %in% c('Köln',
'Düsseldorf',
'Dortmund',
'Essen',
'Duisburg') ~ "1-5",
regio2 %in% c('Bochum',
'Wuppertal',
'Bielefeld',
'Bonn',
'Münster') ~ "6-10",
TRUE                      ~  "elsewhere"
)
)
# drop the variable 'ID' and the above (four) modified variables
drop<-c( "ID", "noParkSpaces", "typeOfFlat", "yearConstructed", "regio2")
df1 = df1[,!names(df1)%in%drop]
# evaluate the structure of the data-frame
str(df1)
# convert the following variables into type 'factor'
df1$newlyConst <- as.factor(df1$newlyConst)
df1$balcony <- as.factor(df1$balcony)
df1$parking_transf <- as.factor(df1$parking_transf)
df1$hasKitchen <- as.factor(df1$hasKitchen)
df1$lift <- as.factor(df1$lift)
df1$type_flat_transf <- as.factor(df1$type_flat_transf)
df1$garden <- as.factor(df1$garden)
df1$CityType <- as.factor(df1$CityType)
df1$condition <- as.factor(df1$condition)
df1$lastRefurbish <- as.factor(df1$lastRefurbish)
df1$energyEfficiencyClass <- as.factor(df1$energyEfficiencyClass)
tab1(df1$condition, xlab = "condition",
names.arg=c("Average","Good", "No information"))
# discrete variables with more than 2 levels
tab1(df1$floor, xlab="Floor")
?tab1
tab1(x0, decimal = 1, sort.group = FALSE,
cum.percent = !any(is.na(x0)), graph = TRUE,
missing = TRUE, bar.values = "frequency",
horiz = FALSE, cex = 1, cex.names = 1, main = "auto", xlab = "auto",
ylab = "auto", col = "auto", gen.ind.vars = FALSE, ...)
tab1(x0, decimal = 1, sort.group = FALSE,
cum.percent = !any(is.na(x0)), graph = TRUE,
missing = TRUE, bar.values = "frequency",
horiz = FALSE, cex = 1, cex.names = 1, main = "auto", xlab = "auto",
ylab = "auto", col = "auto", gen.ind.vars = FALSE, ...)
tab1(x0, decimal = 1, sort.group = FALSE,
cum.percent = !any(is.na(x0)), graph = TRUE,
missing = TRUE, bar.values = "frequency",
horiz = FALSE, cex = 1, cex.names = 1, main = "auto", xlab = "auto",
ylab = "auto", col = "auto", gen.ind.vars = FALSE)
tab1(df1$floor, decimal = 1, sort.group = FALSE,
cum.percent = !any(is.na(x0)), graph = TRUE,
missing = TRUE, bar.values = "frequency",
horiz = FALSE, cex = 1, cex.names = 1, main = "auto", xlab = "auto",
ylab = "auto", col = "auto", gen.ind.vars = FALSE)
tab1(df1$floor, decimal = 1, sort.group = FALSE,
cum.percent = !any(is.na(df1$floor)), graph = TRUE,
missing = TRUE, bar.values = "frequency",
horiz = FALSE, cex = 1, cex.names = 1, main = "auto", xlab = "auto",
ylab = "auto", col = "auto", gen.ind.vars = FALSE)
# discrete variables with more than 2 levels
tab1(df1$floor, xlab="Floor", ylab="freq")
# discrete variables with more than 2 levels
tab1(df1$floor, xlab="gloor", ylab="freq")
# discrete variables with more than 2 levels
tab1(df1$floor, ylab="freq",xlab="gloor")
# discrete variables with more than 2 levels
tab1(df1$floor, ylab="fre",xlab="gloor")
tab1(df1$condition,
names.arg=c("Average","Good", "No information"))
tab1(df1$lastRefurbish,
names.arg=c("Last 5 years","No information", "Over 5 years"))
tab1(df1$energyEfficiencyClass,
names.arg=c("A+/A/B/C", "D/E/F/G/H", "No information"))
tab1(df1$type_flat_transf,
names.arg=c("Apartment","Luxurious/Artistic/Other",
"No information", "Raised ground floor/ Ground floor",
"Roof storey/ Half basement"))
library(dplyr)
library(tidyr)
library(ggplot2)
library(zoo)
library(epiDisplay)
# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
View(df1)
View(df1)
# load data set into data-frame 'df1'
df1<-read.csv("C:/Users/Hassan Ali/Desktop/ICS/Project 3/ImmoDataNRW.csv")
View(df1)
View(df1)
